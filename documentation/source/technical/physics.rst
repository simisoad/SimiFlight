==================
Flight Physics Engine
=====================

The Flight Physics Engine is the heart of SimiFlight's simulation capabilities,
providing realistic aerodynamic behavior based on physical principles.

Core Forces
===========

The physics engine models four fundamental forces:

* **Lift** - Perpendicular force generated by airflow over airfoils
* **Drag** - Resistance force opposing motion through air
* **Weight** - Gravitational force pulling the aircraft down
* **Thrust** - Propulsive force from engines

.. figure:: ../_static/core_forces.png
   :alt: Core Forces Diagram
   :align: center
   
   *The four fundamental forces acting on an aircraft in flight*

Physics Model
=============

Implementation Approach
-----------------------

The flight physics system is implemented in layers:

1. **Prototype layer** - Initial implementation in GDScript
2. **Performance layer** - Critical components ported to C++ GDExtensions
3. **Integration layer** - Connection to Godot's physics system

Multi-point Force Application
-----------------------------

Forces are applied at specific control points:

* **Wings** - Main lifting surfaces with variable control points
* **Control surfaces** - Ailerons, elevators, rudders with separate force calculations
* **Engines** - Thrust vectors with proper positioning

.. code-block:: cpp

   struct ForcePoint {
       Vector3 position;   // Relative to aircraft center
       Vector3 direction;  // Force direction vector
       float magnitude;    // Force magnitude
   };

Aerodynamic Data
================

Curve-Based Approach
--------------------

SimiFlight uses precomputed aerodynamic tables:

* **Lift coefficients** by angle of attack and Mach number
* **Drag coefficients** by angle of attack and Mach number
* **Moment coefficients** for rotational forces
* **Ground effect** modifications near terrain

.. figure:: ../_static/lift_curve.png
   :alt: Lift Curve
   :align: center
   
   *Example lift curve showing coefficient of lift vs. angle of attack*

Special Conditions
------------------

The physics model accounts for special flight conditions:

* **Stall** - Separation of airflow at high angles of attack
* **Compressibility** - Air behavior changes at high subsonic speeds
* **Prandtl-Glauert correction** - Applied up to Mach 0.85
* **Ground effect** - Modified lift near terrain

Performance Optimization
========================

Multi-threading
---------------

The physics engine utilizes multi-threading for performance:

* **Force calculations** distributed across worker threads
* **Aerodynamic lookups** processed in parallel
* **Thread synchronization** for consistent physics

.. code-block:: cpp

   // Multi-threaded force calculation example
   void calculateForcesThreaded(const AircraftState& state, 
                               std::vector<ForcePoint>& forces) {
       // Divide force points among threads
       // Process each thread's workload
       // Synchronize results
   }

Integration with Curve Tool
===========================

The physics engine consumes data from the :doc:`curve` to model aerodynamic behaviors:

* **Load curves** at aircraft initialization
* **Interpolate values** during runtime calculations
* **Cache frequent lookups** for performance

Code Example
============

.. code-block:: gdscript

   # Simplified lift calculation in GDScript
   func calculate_lift(airfoil_data, angle_of_attack, airspeed, air_density, wing_area):
       var lift_coefficient = airfoil_data.get_lift_coefficient(angle_of_attack)
       var dynamic_pressure = 0.5 * air_density * airspeed * airspeed
       var lift_force = lift_coefficient * dynamic_pressure * wing_area
       return lift_force

Related Technical Concepts
==========================

* :doc:`curve` - Generation of aerodynamic data
* :doc:`integration` - Connection with Python aerodynamic tools
